version: "3.9" # Specify a compatible Docker Compose version

services:
  postgres:
    image: postgres:15 # Use a specific version for production
    restart: unless-stopped # Restart only if container exits abnormally
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent storage for data
    networks:
      - backend-network

  redis:
    image: redis:7 # Use a specific version for production
    restart: unless-stopped # Restart only if container exits abnormally
    env_file: .env
    volumes:
      - redis_data:/data # Persistent storage for Redis data
    networks:
      - backend-network

  nginx:
    image: nginx:1.25-alpine # Use a specific version for production
    restart: unless-stopped # Restart only if container exits abnormally
    env_file: .env
    volumes:
      - type: volume
        source: media_data
        target: /usr/share/nginx/html/media
        read_only: true
        volume:
          nocopy: true
      - type: volume
        source: static_data
        target: /usr/share/nginx/html/static
        read_only: true
        volume:
          nocopy: true
    depends_on:
      - django
      - nextjs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.staticfiles.rule=PathPrefix(`/static/`) || PathPrefix(`/media/`) || PathPrefix(`/_next/static/`)"
      - "traefik.http.routers.staticfiles.entrypoints=web,backend"
      - "traefik.http.routers.staticfiles.priority=1"
    networks:
      - backend-network

  reverse-proxy:
    image: traefik:v3.0
    env_file: .env
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.backend.address=:8000"
      - "--certificatesresolvers.le-resolver.acme.httpchallenge=true"
      - "--certificatesresolvers.le-resolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le-resolver.acme.email=admin@yourdomain.com"
      - "--certificatesresolvers.le-resolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8000:8000"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - backend-network
      - frontend-network

  django:
    build: ./backend # Path to your Django project directory
    image: crackaf/tax-chat:backend # Use a specific version for production
    restart: unless-stopped # Restart only if container exits abnormally
    env_file: .env
    # command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000 # Expose Django on port 8000 within the container
    volumes:
      - "static_data:/var/www/static"
      - "media_data:/var/www/media"
    depends_on:
      - postgres
      - redis # Ensure Postgres and Redis are up before Django starts
      - nextjs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`127.0.0.1`) || Host(`localhost`) || Host(`ec2-3-112-67-3.ap-northeast-1.compute.amazonaws.com`)"
      - "traefik.http.routers.django.entrypoints=backend"
      - "traefik.http.routers.django.priority=2"
    networks:
      - backend-network

  nextjs:
    build: ./frontend
    image: crackaf/tax-chat:frontend
    restart: unless-stopped
    env_file: .env
    volumes:
      - "static_data:/app/.next/static"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`127.0.0.1`) || Host(`localhost`) || Host(`ec2-3-112-67-3.ap-northeast-1.compute.amazonaws.com`)"
      - "traefik.http.routers.nextjs.entrypoints=web"
      - "traefik.http.routers.nextjs.priority=3"
    networks:
      - frontend-network
    ports:
      - "3000:3000"

  fastapi-ocr:
    build: ./ocr-tesseract
    image: crackaf/ocr-tesseract:latest
    restart: unless-stopped
    env_file: .env
    volumes:
      - "static_data:/var/www/static"
      - "media_data:/var/www/media"
    depends_on:
      - redis
    networks:
      - backend-network

volumes:
  postgres_data:
  redis_data:
  static_data:
  media_data:


networks:
  backend-network: # Network for backend services
  frontend-network: # Optional network for frontend services (if using)
